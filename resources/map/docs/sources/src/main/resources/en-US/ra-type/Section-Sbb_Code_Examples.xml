<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">%BOOK_ENTITIES;]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>

	<para>The following code shows complete flow of application receiving the MAP Dialog request and then USSD Request. Application sends back Unstructured SS Response and finally on receiving Unstructured SS Request, application closes the MAPDialog</para>
	
	
		<programlisting language="java">
public abstract class SipSbb implements Sbb {

	private SbbContext sbbContext;


	private MAPContextInterfaceFactory mapAcif;
	private MAPProvider mapProvider;
	private MAPParameterFactory mapParameterFactory;
	
	private static byte ussdDataCodingScheme = 0x0F;


	private Tracer logger;

	/** Creates a new instance of CallSbb */
	public SipSbb() {
	}

	/**
	 * MAP USSD Event Handlers
	 */

	public void onProcessUnstructuredSSRequest(
			ProcessUnstructuredSSIndication evt, ActivityContextInterface aci) {

		try {

			long invokeId = evt.getInvokeId();
			this.setInvokeId(invokeId);

			String ussdString = evt.getUSSDString().getString();
			this.setUssdString(ussdString);

			int codingScheme = evt.getUSSDDataCodingScheme() &amp; 0xFF;
			String msisdn = evt.getMSISDNAddressString().getAddress();

			if (this.logger.isFineEnabled()) {
				this.logger
						.fine("Received PROCESS_UNSTRUCTURED_
						SS_REQUEST_INDICATION for MAP Dialog Id "
								+ evt.getMAPDialog().getDialogId()+ 
								" ussdString = "+ussdString);
			}
			
			USSDString ussdStringObj = this.mapServiceFactory
				.createUSSDString("1. Movies 2. Songs 3. End");
			
			evt.getMAPDialog().addUnstructuredSSResponse(invokeId, false,
					ussdDataCodingScheme, ussdStringObj);
			
			evt.getMAPDialog().send();


		} catch (Exception e) {
			logger.severe("Error while sending MAP USSD message", e);
		}

	}

	public void onUnstructuredSSRequest(UnstructuredSSIndication evt,
			ActivityContextInterface aci) {

		if (this.logger.isFineEnabled()) {
			this.logger
					.fine("Received UNSTRUCTURED_SS_REQUEST_INDICATION for MAP Dialog Id "
							+ evt.getMAPDialog().getDialogId());
		}
		
		try{

		MAPDialog mapDialog = evt.getMAPDialog();
		USSDString ussdStrObj = evt.getUSSDString();
		
		long invokeId = evt.getInvokeId();
		
		
		USSDString ussdStringObj = this.mapServiceFactory.createUSSDString("Thank you");
		
		evt.getMAPDialog().addUnstructuredSSResponse(invokeId, false,
				ussdDataCodingScheme, ussdStringObj);
		
		//End MAPDialog
		evt.getMAPDialog().close(false);
		
		}catch(Exception e){
			logger.severe("Error while sending MAP USSD ", e);
		}
	}

	...


	public void setSbbContext(SbbContext sbbContext) {
		this.sbbContext = sbbContext;
		this.logger = sbbContext.getTracer("USSD-SIP");

		try {
			Context ctx = (Context) new InitialContext()
					.lookup("java:comp/env");

			

			mapAcif = (MAPContextInterfaceFactory) ctx
					.lookup("slee/resources/map/2.0/acifactory");

			mapProvider = (MAPProvider) ctx
					.lookup("slee/resources/map/2.0/provider");

			this.mapParameterFactory = this.mapProvider.getMAPParameterFactory();

			
		} catch (Exception ne) {
			logger.severe("Could not set SBB context:", ne);
		}
	}

	public void unsetSbbContext() {
		this.sbbContext = null;
		this.logger = null;
	}

	public void sbbCreate() throws CreateException {
	}

	public void sbbPostCreate() throws CreateException {
	}

	public void sbbActivate() {
	}

	public void sbbPassivate() {
	}

	public void sbbLoad() {
	}

	public void sbbStore() {
	}

	public void sbbRemove() {
	}

	public void sbbExceptionThrown(Exception exception, Object object,
			ActivityContextInterface activityContextInterface) {
	}

	public void sbbRolledBack(RolledBackContext rolledBackContext) {
	}
}
		
		</programlisting>
	
</section>
